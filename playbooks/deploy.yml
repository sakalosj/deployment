# MIT License
#
# Copyright (c) 2018-2019 Red Hat, Inc.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

---
- name: packit-service deployment
  hosts: all
  vars:
    # feel free to override these in vars/
    validate_certs: no
    deployment: "{{ lookup('env', 'DEPLOYMENT') }}"
    sandbox_namespace: "packit-{{ deployment }}-sandbox"
    with_fedmsg: true
    with_centosmsg: true
    with_redis_commander: true
    with_flower: true
    with_dashboard: true
    with_beat: true
    image: "docker.io/usercont/packit-service:{{ deployment }}"
    image_worker: "docker.io/usercont/packit-service-worker:{{ deployment }}"
    image_fedmsg: "docker.io/usercont/packit-service-fedmsg:{{ deployment }}"
    image_centosmsg: "docker.io/usercont/packit-service-centosmsg:{{ deployment }}"
    image_dashboard: "docker.io/usercont/packit-dashboard:{{ deployment }}"
    worker_replicas: 1
    path_to_secrets: "../secrets"
    # to be used in Image streams as importPolicy:scheduled value
    auto_import_images: "{{(deployment != 'prod')}}"
    # used in dev/zuul deployment to tag & push images to cluster
    container_engine: "{{ lookup('pipe', 'command -v podman 2> /dev/null || echo docker') }}"
  tasks:
    - name: include variables
      include_vars: ../vars/{{ deployment }}.yml
      tags:
        - always

    - name: include extra secret vars
      include_vars: "{{ path_to_secrets }}/{{ deployment }}/extra-vars.yml"
      tags:
        - always

    - name: secrets not related specific deployment stage
      include_vars: "{{ path_to_secrets }}/secrets.yaml"
      # deployed only to stg as here are hosted stage-independent infrastructure components
      # e.g. rebuild-base-image cronjob
      when: deployment  == "stg"
      tags:
        - always

    - name: Get k8s token and check it.
      block:
        - name: get kubeconfig token
          command: oc whoami -t
          register: kubeconfig_token
        - name: check if tokens match
          assert:
            that:
              - kubeconfig_token.stdout == api_key
            msg: "OpenShift API token defined in vars/ does not match token from your current environment."
      ignore_errors: yes
      tags:
        - always

    - name: Push dev images to local registry
      block:
        - set_fact: tls_verify_false="{{ '--tls-verify=false' if 'podman' in container_engine else '' }}"
        - shell: "{{ container_engine }} login -u developer -p $(oc whoami -t) 172.30.1.1:5000 {{ tls_verify_false }}"
        - command: "{{ container_engine }} inspect {{ image }}"
        - command: "{{ container_engine }} tag {{ image }} 172.30.1.1:5000/myproject/packit-service:dev"
        - command: "{{ container_engine }} push 172.30.1.1:5000/myproject/packit-service:dev {{ tls_verify_false }}"
        - command: "{{ container_engine }} inspect {{ image_worker }}"
        - command: "{{ container_engine }} tag {{ image_worker }} 172.30.1.1:5000/myproject/packit-worker:dev"
        - command: "{{ container_engine }} push 172.30.1.1:5000/myproject/packit-worker:dev {{ tls_verify_false }}"
      when: deployment == "dev"

    - name: Deploy templates
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      loop:
        - "{{ lookup('template', '../openshift/secret-packit-ssh.yml.j2') }}"
        - "{{ lookup('template', '../openshift/secret-packit-secrets.yml.j2') }}"
        - "{{ lookup('template', '../openshift/secret-centos-secrets.yml.j2') }}"
        - "{{ lookup('template', '../openshift/secret-packit-config.yml.j2') }}"
        - "{{ lookup('template', '../openshift/secret-sentry.yml.j2') }}"
        - "{{ lookup('template', '../openshift/secret-postgres.yml.j2') }}"
        - "{{ lookup('template', '../openshift/secret-rebuild-base-image.yml.j2') }}"
        - "{{ lookup('template', '../openshift/sandbox-namespace.yml.j2') }}"
      tags:
        - always

    - name: Deploy packit-service
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/packit-service.yml.j2')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      tags:
        - packit-service

    - name: Deploy packit-service-worker
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/packit-service-worker.yml.j2')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      tags:
        - packit-service-worker

    - name: Deploy packit-service-beat
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/packit-service-beat.yml.j2')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      when: with_beat
      tags:
        - packit-service-beat

    - name: Deploy dashboard
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/dashboard.yml.j2')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      when: with_dashboard
      tags:
        - dashboard

    - name: Deploy postgres
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/pg.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"

    - name: Deploy redis
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/redis.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
        apply: yes
      tags:
        - redis

    - name: Create redis-commander secrets
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/secret-redis-commander.yml.j2') }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
        apply: yes
      tags:
        - redis-commander
      notify:
        - Rollout redis-commander
      when: with_redis_commander

    - name: Deploy redis-commander
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/redis-commander.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
        apply: yes
      when: with_redis_commander
      tags:
        - redis-commander
      register: redis_commander

    - name: Create flower secret
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/secret-flower.yml.j2') }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
        apply: yes
      tags:
        - flower
      notify:
        - Rollout flower
      when: with_flower

    - name: Deploy flower
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/flower.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      when: with_flower
      tags:
        - flower
      register: flower

    - name: Deploy packit-service-fedmsg
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/packit-service-fedmsg.yml.j2')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      tags:
        - fedmsg
      when: with_fedmsg

    - name: Deploy packit-service-centosmsg
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/packit-service-centosmsg.yml.j2')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
      tags:
        - centosmsg
      when: with_centosmsg

    - name: Set up the sandbox namespace
      command: oc adm -n {{ sandbox_namespace }} policy add-role-to-user edit system:serviceaccount:{{ project }}:default

    - name: Wait for worker-0 to be running
      k8s:
        namespace: "{{ project }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        validate_certs: "{{ validate_certs }}"
        name: packit-worker-0
        kind: Pod
        wait: yes
        wait_condition:
          type: Ready
        wait_timeout: 600 # 10 minutes to pull the image and run the container
    # you can't wait for DC nor service, so let's make sure the stuff was rolled out
    - name: Wait for p-s rollout to complete
      command: oc rollout status -w dc packit-service
      register: oc_rollout_status
    - name: Check the rollout was successful
      assert:
        that: '"successfully rolled out" in oc_rollout_status.stdout'

  handlers:
    - name: Rollout redis-commander
      command: oc rollout latest dc/redis-commander
      # Run this rollout only if the DeploymentConfig above didn't change,
      # and so it wasn't rolled out yet.
      when: not redis_commander.changed

    - name: Rollout flower
      command: oc rollout latest dc/flower
      # Run this rollout only if the DeploymentConfig above didn't change,
      # and so it wasn't rolled out yet.
      when: not flower.changed
